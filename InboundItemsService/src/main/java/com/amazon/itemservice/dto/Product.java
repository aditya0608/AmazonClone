/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.amazon.itemservice.dto;

import org.apache.avro.data.RecordBuilderBase;
import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Product extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3123283582278606197L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Product\",\"namespace\":\"schema\",\"fields\":[{\"name\":\"productId\",\"type\":\"string\",\"doc\":\"The id of the product\"},{\"name\":\"productDescription\",\"type\":\"string\",\"doc\":\"The description of the product\"},{\"name\":\"productPrice\",\"type\":\"double\",\"doc\":\"price of the product\"},{\"name\":\"productImage\",\"type\":\"bytes\",\"doc\":\"The image of the product\"},{\"name\":\"productCategory\",\"type\":{\"type\":\"record\",\"name\":\"ProductCategory\",\"fields\":[{\"name\":\"categoryName\",\"type\":\"string\"},{\"name\":\"categoryCode\",\"type\":\"string\"},{\"name\":\"categoryDescription\",\"type\":\"string\"}]}},{\"name\":\"productType\",\"type\":{\"type\":\"enum\",\"name\":\"ProductType\",\"symbols\":[\"NEW\",\"EXISTING\"]},\"default\":\"NEW\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Product> ENCODER =
      new BinaryMessageEncoder<Product>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Product> DECODER =
      new BinaryMessageDecoder<Product>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Product> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Product> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Product> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Product>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Product to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Product from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Product instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Product fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The id of the product */
   private java.lang.CharSequence productId;
  /** The description of the product */
   private java.lang.CharSequence productDescription;
  /** price of the product */
   private double productPrice;
  /** The image of the product */
   private java.nio.ByteBuffer productImage;
   private ProductCategory productCategory;
   private ProductType productType;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Product() {}

  /**
   * All-args constructor.
   * @param productId The id of the product
   * @param productDescription The description of the product
   * @param productPrice price of the product
   * @param productImage The image of the product
   * @param productCategory The new value for productCategory
   * @param productType The new value for productType
   */
  public Product(java.lang.CharSequence productId, java.lang.CharSequence productDescription, java.lang.Double productPrice, java.nio.ByteBuffer productImage, ProductCategory productCategory, ProductType productType) {
    this.productId = productId;
    this.productDescription = productDescription;
    this.productPrice = productPrice;
    this.productImage = productImage;
    this.productCategory = productCategory;
    this.productType = productType;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return productId;
    case 1: return productDescription;
    case 2: return productPrice;
    case 3: return productImage;
    case 4: return productCategory;
    case 5: return productType;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: productId = (java.lang.CharSequence)value$; break;
    case 1: productDescription = (java.lang.CharSequence)value$; break;
    case 2: productPrice = (java.lang.Double)value$; break;
    case 3: productImage = (java.nio.ByteBuffer)value$; break;
    case 4: productCategory = (ProductCategory)value$; break;
    case 5: productType = (ProductType)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'productId' field.
   * @return The id of the product
   */
  public java.lang.CharSequence getProductId() {
    return productId;
  }


  /**
   * Sets the value of the 'productId' field.
   * The id of the product
   * @param value the value to set.
   */
  public void setProductId(java.lang.CharSequence value) {
    this.productId = value;
  }

  /**
   * Gets the value of the 'productDescription' field.
   * @return The description of the product
   */
  public java.lang.CharSequence getProductDescription() {
    return productDescription;
  }


  /**
   * Sets the value of the 'productDescription' field.
   * The description of the product
   * @param value the value to set.
   */
  public void setProductDescription(java.lang.CharSequence value) {
    this.productDescription = value;
  }

  /**
   * Gets the value of the 'productPrice' field.
   * @return price of the product
   */
  public double getProductPrice() {
    return productPrice;
  }


  /**
   * Sets the value of the 'productPrice' field.
   * price of the product
   * @param value the value to set.
   */
  public void setProductPrice(double value) {
    this.productPrice = value;
  }

  /**
   * Gets the value of the 'productImage' field.
   * @return The image of the product
   */
  public java.nio.ByteBuffer getProductImage() {
    return productImage;
  }


  /**
   * Sets the value of the 'productImage' field.
   * The image of the product
   * @param value the value to set.
   */
  public void setProductImage(java.nio.ByteBuffer value) {
    this.productImage = value;
  }

  /**
   * Gets the value of the 'productCategory' field.
   * @return The value of the 'productCategory' field.
   */
  public ProductCategory getProductCategory() {
    return productCategory;
  }


  /**
   * Sets the value of the 'productCategory' field.
   * @param value the value to set.
   */
  public void setProductCategory(ProductCategory value) {
    this.productCategory = value;
  }

  /**
   * Gets the value of the 'productType' field.
   * @return The value of the 'productType' field.
   */
  public ProductType getProductType() {
    return productType;
  }


  /**
   * Sets the value of the 'productType' field.
   * @param value the value to set.
   */
  public void setProductType(ProductType value) {
    this.productType = value;
  }

  /**
   * Creates a new Product RecordBuilder.
   * @return A new Product RecordBuilder
   */
  public static Product.Builder newBuilder() {
    return new Product.Builder();
  }

  /**
   * Creates a new Product RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Product RecordBuilder
   */
  public static Product.Builder newBuilder(Product.Builder other) {
    if (other == null) {
      return new Product.Builder();
    } else {
      return new Product.Builder(other);
    }
  }

  /**
   * Creates a new Product RecordBuilder by copying an existing Product instance.
   * @param other The existing instance to copy.
   * @return A new Product RecordBuilder
   */
  public static Product.Builder newBuilder(Product other) {
    if (other == null) {
      return new Product.Builder();
    } else {
      return new Product.Builder(other);
    }
  }

  /**
   * RecordBuilder for Product instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Product>
    implements org.apache.avro.data.RecordBuilder<Product> {

    /** The id of the product */
    private java.lang.CharSequence productId;
    /** The description of the product */
    private java.lang.CharSequence productDescription;
    /** price of the product */
    private double productPrice;
    /** The image of the product */
    private java.nio.ByteBuffer productImage;
    private ProductCategory productCategory;
    private ProductCategory.Builder productCategoryBuilder;
    private ProductType productType;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Product.Builder other) {
      super(other);
      if (RecordBuilderBase.isValidValue(fields()[0], other.productId)) {
        this.productId = data().deepCopy(fields()[0].schema(), other.productId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (RecordBuilderBase.isValidValue(fields()[1], other.productDescription)) {
        this.productDescription = data().deepCopy(fields()[1].schema(), other.productDescription);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (RecordBuilderBase.isValidValue(fields()[2], other.productPrice)) {
        this.productPrice = data().deepCopy(fields()[2].schema(), other.productPrice);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (RecordBuilderBase.isValidValue(fields()[3], other.productImage)) {
        this.productImage = data().deepCopy(fields()[3].schema(), other.productImage);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (RecordBuilderBase.isValidValue(fields()[4], other.productCategory)) {
        this.productCategory = data().deepCopy(fields()[4].schema(), other.productCategory);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (other.hasProductCategoryBuilder()) {
        this.productCategoryBuilder = ProductCategory.newBuilder(other.getProductCategoryBuilder());
      }
      if (RecordBuilderBase.isValidValue(fields()[5], other.productType)) {
        this.productType = data().deepCopy(fields()[5].schema(), other.productType);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing Product instance
     * @param other The existing instance to copy.
     */
    private Builder(Product other) {
      super(SCHEMA$);
      if (RecordBuilderBase.isValidValue(fields()[0], other.productId)) {
        this.productId = data().deepCopy(fields()[0].schema(), other.productId);
        fieldSetFlags()[0] = true;
      }
      if (RecordBuilderBase.isValidValue(fields()[1], other.productDescription)) {
        this.productDescription = data().deepCopy(fields()[1].schema(), other.productDescription);
        fieldSetFlags()[1] = true;
      }
      if (RecordBuilderBase.isValidValue(fields()[2], other.productPrice)) {
        this.productPrice = data().deepCopy(fields()[2].schema(), other.productPrice);
        fieldSetFlags()[2] = true;
      }
      if (RecordBuilderBase.isValidValue(fields()[3], other.productImage)) {
        this.productImage = data().deepCopy(fields()[3].schema(), other.productImage);
        fieldSetFlags()[3] = true;
      }
      if (RecordBuilderBase.isValidValue(fields()[4], other.productCategory)) {
        this.productCategory = data().deepCopy(fields()[4].schema(), other.productCategory);
        fieldSetFlags()[4] = true;
      }
      this.productCategoryBuilder = null;
      if (RecordBuilderBase.isValidValue(fields()[5], other.productType)) {
        this.productType = data().deepCopy(fields()[5].schema(), other.productType);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'productId' field.
      * The id of the product
      * @return The value.
      */
    public java.lang.CharSequence getProductId() {
      return productId;
    }


    /**
      * Sets the value of the 'productId' field.
      * The id of the product
      * @param value The value of 'productId'.
      * @return This builder.
      */
    public Product.Builder setProductId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.productId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'productId' field has been set.
      * The id of the product
      * @return True if the 'productId' field has been set, false otherwise.
      */
    public boolean hasProductId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'productId' field.
      * The id of the product
      * @return This builder.
      */
    public Product.Builder clearProductId() {
      productId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'productDescription' field.
      * The description of the product
      * @return The value.
      */
    public java.lang.CharSequence getProductDescription() {
      return productDescription;
    }


    /**
      * Sets the value of the 'productDescription' field.
      * The description of the product
      * @param value The value of 'productDescription'.
      * @return This builder.
      */
    public Product.Builder setProductDescription(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.productDescription = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'productDescription' field has been set.
      * The description of the product
      * @return True if the 'productDescription' field has been set, false otherwise.
      */
    public boolean hasProductDescription() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'productDescription' field.
      * The description of the product
      * @return This builder.
      */
    public Product.Builder clearProductDescription() {
      productDescription = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'productPrice' field.
      * price of the product
      * @return The value.
      */
    public double getProductPrice() {
      return productPrice;
    }


    /**
      * Sets the value of the 'productPrice' field.
      * price of the product
      * @param value The value of 'productPrice'.
      * @return This builder.
      */
    public Product.Builder setProductPrice(double value) {
      validate(fields()[2], value);
      this.productPrice = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'productPrice' field has been set.
      * price of the product
      * @return True if the 'productPrice' field has been set, false otherwise.
      */
    public boolean hasProductPrice() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'productPrice' field.
      * price of the product
      * @return This builder.
      */
    public Product.Builder clearProductPrice() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'productImage' field.
      * The image of the product
      * @return The value.
      */
    public java.nio.ByteBuffer getProductImage() {
      return productImage;
    }


    /**
      * Sets the value of the 'productImage' field.
      * The image of the product
      * @param value The value of 'productImage'.
      * @return This builder.
      */
    public Product.Builder setProductImage(java.nio.ByteBuffer value) {
      validate(fields()[3], value);
      this.productImage = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'productImage' field has been set.
      * The image of the product
      * @return True if the 'productImage' field has been set, false otherwise.
      */
    public boolean hasProductImage() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'productImage' field.
      * The image of the product
      * @return This builder.
      */
    public Product.Builder clearProductImage() {
      productImage = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'productCategory' field.
      * @return The value.
      */
    public ProductCategory getProductCategory() {
      return productCategory;
    }


    /**
      * Sets the value of the 'productCategory' field.
      * @param value The value of 'productCategory'.
      * @return This builder.
      */
    public Product.Builder setProductCategory(ProductCategory value) {
      validate(fields()[4], value);
      this.productCategoryBuilder = null;
      this.productCategory = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'productCategory' field has been set.
      * @return True if the 'productCategory' field has been set, false otherwise.
      */
    public boolean hasProductCategory() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'productCategory' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public ProductCategory.Builder getProductCategoryBuilder() {
      if (productCategoryBuilder == null) {
        if (hasProductCategory()) {
          setProductCategoryBuilder(ProductCategory.newBuilder(productCategory));
        } else {
          setProductCategoryBuilder(ProductCategory.newBuilder());
        }
      }
      return productCategoryBuilder;
    }

    /**
     * Sets the Builder instance for the 'productCategory' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public Product.Builder setProductCategoryBuilder(ProductCategory.Builder value) {
      clearProductCategory();
      productCategoryBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'productCategory' field has an active Builder instance
     * @return True if the 'productCategory' field has an active Builder instance
     */
    public boolean hasProductCategoryBuilder() {
      return productCategoryBuilder != null;
    }

    /**
      * Clears the value of the 'productCategory' field.
      * @return This builder.
      */
    public Product.Builder clearProductCategory() {
      productCategory = null;
      productCategoryBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'productType' field.
      * @return The value.
      */
    public ProductType getProductType() {
      return productType;
    }


    /**
      * Sets the value of the 'productType' field.
      * @param value The value of 'productType'.
      * @return This builder.
      */
    public Product.Builder setProductType(ProductType value) {
      validate(fields()[5], value);
      this.productType = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'productType' field has been set.
      * @return True if the 'productType' field has been set, false otherwise.
      */
    public boolean hasProductType() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'productType' field.
      * @return This builder.
      */
    public Product.Builder clearProductType() {
      productType = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Product build() {
      try {
        Product record = new Product();
        record.productId = fieldSetFlags()[0] ? this.productId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.productDescription = fieldSetFlags()[1] ? this.productDescription : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.productPrice = fieldSetFlags()[2] ? this.productPrice : (java.lang.Double) defaultValue(fields()[2]);
        record.productImage = fieldSetFlags()[3] ? this.productImage : (java.nio.ByteBuffer) defaultValue(fields()[3]);
        if (productCategoryBuilder != null) {
          try {
            record.productCategory = this.productCategoryBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("productCategory"));
            throw e;
          }
        } else {
          record.productCategory = fieldSetFlags()[4] ? this.productCategory : (ProductCategory) defaultValue(fields()[4]);
        }
        record.productType = fieldSetFlags()[5] ? this.productType : (ProductType) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Product>
    WRITER$ = (org.apache.avro.io.DatumWriter<Product>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Product>
    READER$ = (org.apache.avro.io.DatumReader<Product>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.productId);

    out.writeString(this.productDescription);

    out.writeDouble(this.productPrice);

    out.writeBytes(this.productImage);

    this.productCategory.customEncode(out);

    out.writeEnum(this.productType.ordinal());

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.productId = in.readString(this.productId instanceof Utf8 ? (Utf8)this.productId : null);

      this.productDescription = in.readString(this.productDescription instanceof Utf8 ? (Utf8)this.productDescription : null);

      this.productPrice = in.readDouble();

      this.productImage = in.readBytes(this.productImage);

      if (this.productCategory == null) {
        this.productCategory = new ProductCategory();
      }
      this.productCategory.customDecode(in);

      this.productType = ProductType.values()[in.readEnum()];

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.productId = in.readString(this.productId instanceof Utf8 ? (Utf8)this.productId : null);
          break;

        case 1:
          this.productDescription = in.readString(this.productDescription instanceof Utf8 ? (Utf8)this.productDescription : null);
          break;

        case 2:
          this.productPrice = in.readDouble();
          break;

        case 3:
          this.productImage = in.readBytes(this.productImage);
          break;

        case 4:
          if (this.productCategory == null) {
            this.productCategory = new ProductCategory();
          }
          this.productCategory.customDecode(in);
          break;

        case 5:
          this.productType = ProductType.values()[in.readEnum()];
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










